# This workflow is an integration test that
# * builds the plugin and then
# * starts a GoCD docker container with the plugin mounted.
#
# The test only takes a look whether GoCD
# recognizes the plugin correctly.
name: Integration Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - uses: actions/upload-artifact@v2
      with:
        name: plugin
        path: target/go-maven-poller-plugin.jar

  # integration test by mounting the plugin via docker
  integration_mount:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goversion: [ "v19.1.0" ]
        accept: [ "application/vnd.go.cd.v4+json" ]
        include:
          - goversion: v18.1.0
            accept: application/vnd.go.cd.v3+json
          - goversion: v17.6.0
            accept: application/vnd.go.cd.v2+json
    steps:
    - uses: actions/checkout@v2
    - name: Download the plugin
      uses: actions/download-artifact@v2
      with:
        name: plugin
    - name: Start a docker container
      run: |
        mkdir -p /tmp/workspace/external
        cp go-maven-poller-plugin.jar /tmp/workspace/external
        docker run --name gocd-server \
         -v /tmp/workspace/external:/godata/plugins/external \
         -d -p8153:8153 \
         gocd/gocd-server:${{ matrix.goversion }}
    - name: Wait and get the plugin info via API
      run: |
        bash ./.github/integration-helper/wait-download-plugin_info.sh ${{ matrix.accept }} ${{ matrix.goversion }}
    - uses: actions/upload-artifact@v2
      with:
        name: output-json-${{ matrix.goversion }}
        path: plugin_info.json
    - name: Kill the docker container
      continue-on-error: true
      run: |
        docker container kill gocd-server
    - name: Show container logs
      run: |
        docker container logs gocd-server
    - name: Test the JSON document for expected values
      run: |
        bash ./.github/integration-helper/check-plugin_info.sh plugin_info.json || exit 1

  # integration test by downloading the plugin via curl
  # at startup
  integration_env:
    needs: build
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      matrix:
        goversion: [ "v20.10.0" ]
        accept: [ "application/vnd.go.cd.v7+json" ]
        include:
          - goversion: v21.2.0
            accept: application/vnd.go.cd.v7+json
          - goversion: v21.1.0
            accept: application/vnd.go.cd.v7+json
          - goversion: v20.9.0
            accept: application/vnd.go.cd.v7+json
          - goversion: v20.8.0
            accept: application/vnd.go.cd.v7+json
          - goversion: v20.7.0
            accept: application/vnd.go.cd.v7+json
    steps:
    - uses: actions/checkout@v2
    - name: Download the plugin
      uses: actions/download-artifact@v2
      with:
        name: plugin
    - name: Install docker compose
      run: |
        sudo apt-get update && sudo apt-get install --yes docker-compose
    - name: Copy the plugin to /tmp for docker compose
      run: |
        cp go-maven-poller-plugin.jar /tmp
        pwd
        ls -al

    - name: Start the containers
      working-directory: ./.github/integration-helper/docker-compose
      run: |
        pwd
        ls -al
        echo "goversion=${{ matrix.goversion }}" > .env
        docker-compose up --detach
    - name: Wait and get the plugin info via API
      run: |
        bash ./.github/integration-helper/wait-download-plugin_info.sh ${{ matrix.accept }} ${{ matrix.goversion }}
    - uses: actions/upload-artifact@v2
      with:
        name: output-json-${{ matrix.goversion }}
        path: plugin_info.json
    - name: Kill the containers
      working-directory: ./.github/integration-helper/docker-compose
      run: |
        docker-compose down
    - name: Show container logs
      working-directory: ./.github/integration-helper/docker-compose
      run: |
        docker-compose logs gocd-server
        docker-compose logs nginx
    - name: Test the JSON document for expected values
      run: |
        bash ./.github/integration-helper/check-plugin_info.sh plugin_info.json || exit 1
